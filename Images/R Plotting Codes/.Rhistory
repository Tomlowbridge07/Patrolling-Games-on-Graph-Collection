{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+geom_point(aes(x = MRange, y =Equal ),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+geom_point(aes(x = MRange, y =Equal ),color="blue")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")++ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound[i]
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound[i]
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("../CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
#load libraries
library(ggplot2)
library(tikzDevice)
options(
tikzMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
),
tikzUnicodeMetricPackages = c(
"\\usepackage{bm}\n",
"\\usetikzlibrary{calc}\n"
)
)
#Define the bounds
CB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m*(1+((n-1)/(floor(m/2))))))
}
else
{
return((floor(m/2))/(floor(m/2)+n-1))
}
}
ACB<-function(n,k,m)
{
if(m<(2*k-1))
{
return((2*m)/(2*(n+k)+m+2*(n-1)))
}
else
{
return((m)/(m+2*(n-1)))
}
}
CB=Vectorize(CB)
ACB=Vectorize(ACB)
n=3
k=6
m=
MRange=3:(2*k+1)
CBound=CB(n,k,MRange)
ACBound=ACB(n,k,MRange)
Equal= (CBound==ACBound)
for(i in 1:length(Equal))
{
if(Equal[i]==TRUE)
{
Equal[i]=ACBound[i]
}
else
{
Equal[i]=NA
}
}
df=data.frame(CBound,ACBound)
#Images created are of size
w=4.8
h=3
#Creating Base Plot and saving
tikz(file=paste("CombVsAdjustedWithn",toString(n),"k",toString(k),".tex",sep=""),width=w,height=h)
BasePlot<-ggplot(df,show.legend='True') + geom_point(aes(x = MRange, y = CBound),color="red") +
geom_line(aes(x = MRange, y = CBound),color="red")+ geom_point(aes(x = MRange, y = ACBound),color="green") +
geom_line(aes(x = MRange, y = ACBound),color="green")+ylab("Upper Bound")+xlab("Attack length, $m$")
print(BasePlot)
dev.off()
print(BasePlot)
